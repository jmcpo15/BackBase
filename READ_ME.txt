Must have Python 3.6 installed on computer.
Run solution.py in a Python shell.

First command that must be entered is set_csv("filename").

Use current_balance() to display a tuple of (total balance, balance of current account, balance of savings).

Use withdraw(account, amount) with account set to either 'current' or 'savings' and the value of the transaction to take money out of either account.

Use deposit(account, amount) with account set to either 'current' or 'savings' and the value of the transaction to put money into either account.

When withdrawing money:
If there is enough money in savings to not be overdrawn then the amount required to not be overdrawn will be transfered from savings to the current account.

If there is not enough money in both the current account and savings then all of the savings will be transfered to reduce the overdraft fees.


When depositing money into savings while in overdraft:
If the deposit into savings is more than the overdraft then the overdraft will be paid off and the rest put into savings.

If the deposit is not big enough to pay off the overdraft then all of the depoist will be put into the current account to reduce the size of the overdraft, thereby decreading fees.


If the customer is not in their overdraft then the entire deposit will go into specified account.



Assumptions:
Ledger already exists with at least one transaction in each account as IDs are not generated by program.
All testing will be done as new transactions in ledger and will not affect past transactions.
Python repersents utc as +00.00 instead of Z as currently in the ledger.
